"""stubs for pychain - Chainable expressions for functional-style data processing."""

from collections.abc import Callable, Container, Iterable
from random import Random
from typing import Any, Self

from ._protocols import CheckFunc, ProcessFunc, TransformFunc

op: OpConstructor
"""
Constructs chainable operations for functional-style data processing.
"""
it: IterConstructor
"""Constructs chainable iterators-focused functions for functional-style data processing.
"""
struct: StructConstructor
"""Constructs chainable dict-focused functions for functional-style data processing."""

class StructConstructor:
    def __call__[K, V](self, ktype: type[K], vtype: type[V]) -> Struct[K, V, K, V]: ...

class IterConstructor:
    def __call__[T](self, dtype: type[T]) -> Iter[T, T]: ...

class OpConstructor:
    """
    Constructs chainable operations for functional-style data processing.

    Main entry point for creating operations in pychain.

    This class is not meant to be instantiated directly, but rather through the `pc.op()` constructor.
    """
    def __call__[T](self, dtype: type[T]) -> Op[T, T]:
        """
        Create a chainable operation.

        The `dtype` argument is used to specify the type of the input of the operation.

        The output will be refined at each step of the chain.

        This allows you to build a pipeline, and get back an Op that is inferred, just like a function.

        The type in itself is ignored at runtime.

        You can pass any type: an `int`, a `str`, etc.

        If the type is Iterable (a polars `Series`, a list, a tuple, etc.), you probably want to use the `iter` constructor instead.
        """
        ...

class Op[P, R]:
    def returns(self) -> Callable[[P], R]: ...
    def into[T](self, obj: Callable[[R], T]) -> "Op[P, T]": ...
    def add(self, value: R) -> Self: ...
    def sub(self, value: R) -> Self: ...
    def mul(self, value: R) -> Self: ...
    def truediv(self, value: R) -> Self: ...
    def floordiv(self, value: R) -> Self: ...
    def round_to(self, ndigits: int) -> Self: ...
    def sub_r(self, value: R) -> Self: ...
    def truediv_r(self, value: R) -> Self: ...
    def floordiv_r(self, value: R) -> Self: ...
    def mod(self, value: R) -> Self: ...
    def pow(self, value: R) -> Self: ...
    def neg(self) -> Self: ...
    def abs(self) -> Self: ...
    def not_(self) -> "Op[P, bool]": ...
    def and_(self, value: Callable[[R], bool]) -> "Op[P, bool]": ...
    def or_(self, value: Callable[[R], bool]) -> "Op[P, bool]": ...
    def xor(self, value: Callable[[R], bool]) -> "Op[P, bool]": ...
    def is_true(self) -> "Op[P, bool]": ...
    def is_none(self) -> "Op[P, bool]": ...
    def is_not_none(self) -> "Op[P, bool]": ...
    def is_in(self, values: Container[R]) -> "Op[P, bool]": ...
    def is_not_in(self, values: Container[R]) -> "Op[P, bool]": ...
    def is_iterable(self) -> "Op[P, bool]": ...
    def eq(self, value: R) -> "Op[P, bool]": ...
    def ne(self, value: R) -> "Op[P, bool]": ...
    def gt(self, value: R) -> "Op[P, bool]": ...
    def ge(self, value: R) -> "Op[P, bool]": ...
    def lt(self, value: R) -> "Op[P, bool]": ...
    def le(self, value: R) -> "Op[P, bool]": ...

class Iter[V, V1]:
    def returns(self) -> Callable[[Iterable[V]], V1]: ...
    def agg[T](self, f: Callable[[Iterable[V]], T]) -> Op[Iterable[V], T]: ...
    def into[T](self, obj: Callable[[Iterable[V]], T]) -> "Iter[V, T]": ...
    def group_by[K](self, on: TransformFunc[V, K]) -> dict[K, list[V]]: ...
    def into_frequencies(self) -> dict[V, int]: ...
    def reduce_by[K](
        self, key: TransformFunc[V, K], binop: Callable[[V, V], V]
    ) -> "Iter[V, K]": ...
    def map[T](self, f: TransformFunc[V, T]) -> "Iter[V, T]": ...
    def flat_map(self, f: TransformFunc[V, Iterable[V1]]) -> Self: ...
    def starmap(self, f: TransformFunc[V, V1]) -> Self: ...
    def compose(self, *fns: TransformFunc[V, V1]) -> Self: ...
    def take_while(self, predicate: CheckFunc[V]) -> Self: ...
    def drop_while(self, predicate: CheckFunc[V]) -> Self: ...
    def interleave(self, *others: Iterable[V]) -> Self: ...
    def interpose(self, element: V) -> Self: ...
    def top_n(self, n: int, key: Callable[[V], Any] | None = None) -> Self: ...
    def random_sample(
        self, probability: float, state: Random | int | None = None
    ) -> Self: ...
    def concat(self, *others: Iterable[V]) -> Self: ...
    def filter(self, f: CheckFunc[V]) -> Self: ...
    def accumulate(self, f: Callable[[V, V], V]) -> Self: ...
    def insert_left(self, value: V) -> Self: ...
    def peek(self, note: str | None = None) -> Self: ...
    def peekn(self, n: int, note: str | None = None) -> Self: ...
    def head(self, n: int) -> Self: ...
    def tail(self, n: int) -> Self: ...
    def drop_first(self, n: int) -> Self: ...
    def every(self, index: int) -> Self: ...
    def repeat(self, n: int) -> Self: ...
    def unique(self) -> Self: ...
    def cumsum(self) -> Self: ...
    def cumprod(self) -> Self: ...
    def merge_sorted(
        self, others: Iterable[Iterable[V]], sort_on: Callable[[V], Any] | None = None
    ) -> Self: ...
    def tap(self, func: Callable[[V], None]) -> Self: ...
    def zip_with(
        self, others: Iterable[Iterable[V]], strict: bool = False
    ) -> "Iter[V, tuple[V, ...]]": ...
    def enumerate(self) -> "Iter[V, tuple[int, V]]": ...
    def flatten(self) -> "Iter[V, Any]": ...
    def diff(
        self,
        others: Iterable[Iterable[V]],
        default: Any | None = None,
        key: ProcessFunc[V] | None = None,
    ) -> "Iter[V, tuple[V, ...]]": ...
    def partition(self, n: int, pad: V | None = None) -> "Iter[V, tuple[V, ...]]": ...
    def partition_all(self, n: int) -> "Iter[V, tuple[V, ...]]": ...
    def rolling(self, length: int) -> "Iter[V, tuple[V, ...]]": ...
    def cross_join(self, other: Iterable[V1]) -> "Iter[V, tuple[V1, V]]": ...
    def first(self) -> Op[Iterable[V], V1]: ...
    def second(self) -> Op[Iterable[V], V1]: ...
    def last(self) -> Op[Iterable[V], V1]: ...
    def length(self) -> Op[Iterable[V], int]: ...
    def mean(self) -> Op[Iterable[V], float]: ...
    def median(self) -> Op[Iterable[V], float]: ...
    def mode(self) -> Op[Iterable[V], V1]: ...
    def stdev(self) -> Op[Iterable[V], float]: ...
    def variance(self) -> Op[Iterable[V], float]: ...
    def pvariance(self) -> Op[Iterable[V], float]: ...
    def median_low(self) -> Op[Iterable[V], float]: ...
    def median_high(self) -> Op[Iterable[V], float]: ...
    def median_grouped(self) -> Op[Iterable[V], float]: ...
    def sum(self) -> Op[Iterable[V], float]: ...
    def min(self) -> Op[Iterable[V], V]: ...
    def max(self) -> Op[Iterable[V], V]: ...

class Struct[K, V, K1, V1]:
    def returns(self) -> Callable[[dict[K, V]], dict[K1, V1]]: ...
    def map_keys[T](self, f: TransformFunc[K, T]) -> "Struct[K, V, T, V1]": ...
    def map_values[T](self, f: TransformFunc[V, T]) -> "Struct[K, V1, K1, T]": ...
    def select(self, predicate: CheckFunc[K]) -> Self: ...
    def filter(self, predicate: CheckFunc[V]) -> Self: ...
    def filter_on_key(self, key: K, predicate: CheckFunc[V]) -> Self: ...
    def with_key(self, key: K, value: V) -> Self: ...
    def with_nested_key(self, keys: Iterable[K] | K, value: V) -> Self: ...
    def update_in(self, *keys: K, f: ProcessFunc[V]) -> Self: ...
    def merge(self, *others: dict[K, V]) -> Self: ...
    def merge_with(
        self, f: Callable[[Iterable[V]], V], *others: dict[K, V]
    ) -> Self: ...
    def drop(self, *keys: K) -> Self: ...
    def flatten_keys(self) -> "Struct[K, V, str, V1]": ...
    def into[T](self, obj: Callable[[dict[K1, V1]], T]) -> T: ...