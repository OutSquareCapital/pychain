from collections.abc import Callable, Container
from typing import Any, Self, Literal

class ChainableOp:
    _pipeline: Callable[[Any], Any]
    def __init__(self, pipeline: Callable[[Any], Any] | None = None) -> None: ...
    def __call__(self, value: Any) -> Any: ...
    def _chain(self, new_op: Callable[[Any], Any]) -> Self: ...
    def attr(self, *names: str) -> Self: ...
    def item(self, *keys: Any) -> Self: ...
    def method(self, name: str, *args: Any, **kwargs: Any) -> Self: ...
    def add(self, value: Any) -> Self: ...
    def sub(self, value: Any) -> Self: ...
    def mul(self, value: Any) -> Self: ...
    def truediv(self, value: Any) -> Self: ...
    def floordiv(self, value: Any) -> Self: ...
    def sub_r(self, value: Any) -> Self: ...
    def truediv_r(self, value: Any) -> Self: ...
    def floordiv_r(self, value: Any) -> Self: ...
    def mod(self, value: Any) -> Self: ...
    def pow(self, value: Any) -> Self: ...
    def neg(self) -> Self: ...
    def is_true(self) -> Self: ...
    def is_none(self) -> Self: ...
    def is_not_none(self) -> Self: ...
    def is_in(self, values: Container[Any]) -> Self: ...
    def is_not_in(self, values: Container[Any]) -> Self: ...
    def is_distinct(self) -> Self: ...
    def is_iterable(self) -> Self: ...
    def is_all(self) -> Self: ...
    def is_any(self) -> Self: ...
    def eq(self, value: Any) -> Self: ...
    def ne(self, value: Any) -> Self: ...
    def gt(self, value: Any) -> Self: ...
    def ge(self, value: Any) -> Self: ...
    def lt(self, value: Any) -> Self: ...
    def le(self, value: Any) -> Self: ...
    def mean(self) -> Self: ...
    def median(self) -> Self: ...
    def mode(self) -> Self: ...
    def stdev(self) -> Self: ...
    def variance(self) -> Self: ...
    def pvariance(self) -> Self: ...
    def median_low(self) -> Self: ...
    def median_high(self) -> Self: ...
    def median_grouped(self) -> Self: ...
    def quantiles(self, n: int, method: Literal['inclusive', 'exclusive']) -> Self: ...
    def min(self) -> Self: ...
    def max(self) -> Self: ...
    def sum(self) -> Self: ...

class OpConstructor:
    def __call__(self, name: str | None = None) -> ChainableOp: ...
    def __getattr__(self, name: str) -> ChainableOp: ...
